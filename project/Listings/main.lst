C51 COMPILER V9.54   MAIN                                                                  04/03/2023 19:08:32 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\Embedded System\51\Keil5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          #include <BH.h>
   4          #include <Timer.h>
   5          #include <EEPROM.h>
   6          #include <oled.h>
   7          #include <St.h>
   8          
   9          #define KP 5    //±ÈÀýÏµÊý
  10          #define KI 1    //»ý·ÖÏµÊý
  11          #define KD 3    //Î¢·ÖÏµÊý
  12          #define DT 2  //  (1/0.5)  µ¥´Î²ÉÑùÊ±¼äÎª0.1s,Ê¹ÓÃµ¹Êý
  13          #define pow_KP 4 //ÓÒÒÆµÄÃÝ´Î£¬Ò²¾ÍÊÇ¸ºÃÝ´Î£¬Õâ±ßÒÔ2Îªµ×µÄÃÝ´Î×÷Îª¶¨µãÊýÃÝ´Î£¬ÆäÊµÒ²¿ÉÒÔÑ¡ÓÃ10µÄ±¶Êý×ö*/Ó¦
             -¸ÃÐ§ÂÊÒ²²»»á²îÌ«¶à¡£
  14          #define pow_KI 10
  15          #define pow_KD 8
  16          #define COUNT0_SET 200    //2us*1000=2ms,500hz
  17          #define LOW_LIGHTSET 120  //lightsetÔ½´ó£¬LEDÁÁ¶ÈÔ½µÍ£¨pwmÉèÖÃµÄÔ­Òò£©
  18          #define MID_LIGHTSET 60
  19          #define ALLOWABLE_ERROR 2 //ÖÇÄÜÄ£Ê½Ê±ÔÊÐíµÄÎó²î
  20          
  21          
  22          /*enabled delay function:
  23          delay_nms()
  24          Delay_5us()
  25          Delay_5ms()
  26          */
  27          /*
  28          ËùÓÐOLEDÖ»ÏÔÊ¾×ÖºÅ´óÐ¡Îª16µÄ×ÖÌå£¬×Ö¿âÖÐÒÑ½«Ð¡×ÖºÅÉ¾³ý
  29          */
  30          
  31          /*
  32          Òý½Å¶¨Òå£º
  33                  P0.0-P0.1:OLED
  34                  P1.0-P1.1:BH1750
  35                  P1.2:LED
  36                  P2.0-2.2:MODE UP DOWN
  37          */
  38          
  39          const unsigned char *Space="    ",*NM = "Normal Mode",*SM = "Smart Mode",*NM_High="High",*NM_Mid="Mid",*NM
             -_Low="Low",*LIGHT="Lux=",*BN = "Brightness:",*WL="Lux_Set=",*SL="Smart Lamp:)",*WE="Welcome",*HX="made by Hu Xiao";
  40          
  41          bit UP_sign=0,DOWN_sign=0,MODE_sign=0,m=0;
  42          unsigned char i=0,mode;
  43          unsigned char wish_lux[]={'0','0','3','0','0','\0'};
  44          unsigned int count0=0,light_set=0,count1=0,error=0,error_sum=0,error_last=0,filtered_light_set = 0;
  45          BH_data *lux;
  46          unsigned char *wish_lux_p = &wish_lux;
  47          
  48          sbit LED = P1^2;
  49          sbit MODE = P2^0;
  50          sbit UP = P2^1;
  51          sbit DOWN = P2^2;
  52          
C51 COMPILER V9.54   MAIN                                                                  04/03/2023 19:08:32 PAGE 2   

  53          void Normal_Mode();
  54          void Smart_Mode();
  55          //unsigned int pow(unsigned char m,unsigned char n);
  56          
  57          void main()
  58          {
  59   1        delay_nms(10);
  60   1        BH1750_Init();
  61   1        lux = BH1750_Read();      //·ÀÖ¹lux³ÉÎªÒ°Ö¸Õë
  62   1        OLED_Init();
  63   1        OLED_Clear();
  64   1        OLED_ShowString(35,2,WE,16);  //ÏÔÊ¾»¶Ó­Óï
  65   1        OLED_ShowString(0,4,HX,16);
  66   1        delay_nms(2000); //delay
  67   1        OLED_Clear();
  68   1        delay_nms(10);
  69   1        for (;;){               //Ö÷Ñ­»·
  70   2          mode = IAP_ReadByte(0x2400);     //¶ÁÈ¡ÉÏ´Î¹Ø»úÊ±µÄmode
  71   2          if (mode!=0xFF){         //²»ÊÇµÚÒ»´Î¿ª»úÊ±
  72   3            if (mode==0)Normal_Mode();//½øÈë¶ÔÓ¦µÄÄ£Ê½£¬Ã¿´ÎmodeÇÐ»»Ê±£¬Êµ¼ÊÎª¸ü¸Ä0x2400µÄÖµ£¬È»ºóÔÙ½øÈëÖ÷Ñ­»·ÖÐ¶ÁÈ
             -¡²¢½øÐÐÅÐ¶Ï
  73   3            else if (mode==1)Smart_Mode();
  74   3          }
  75   2          else Normal_Mode();   //µÚÒ»´Î¿ª»úÄ¬ÈÏ½øÈëÆÕÍ¨Ä£Ê½
  76   2        }
  77   1      }
  78          
  79          void Timer0_Do() interrupt 1 using 1    //¼ÆÊ±Æ÷0µÄÖ´ÐÐº¯Êý£¬ÔÚLED¿ÚÉÏÉú³ÉPWM²¨ÐÎ
  80          {
  81   1        count0++;
  82   1        if (count0>=COUNT0_SET){
  83   2          count0=0;
  84   2        }                  //500hz
  85   1        if (count0<light_set)LED = 0;
  86   1        else if (count0>=light_set)LED = 1;
  87   1        TH0 = 0xFF;
  88   1        TL0 = 0xF7;
  89   1      }
  90          
  91          void Timer1_Do() interrupt 3 using 2 //¼ÆÊ±Æ÷1Ö»ÊÇµ¥´¿¸Ä±äcount1£¬²âÁ¿ÔÚmodeº¯ÊýÖÐ½øÐÐ£¬Îª·ÀÖ¹²âÁ¿º¯ÊýÔÚÖÐ
             -¶ÏÄÚÍâÍ¬Ê±Ö´ÐÐ£¬»áµ¼ÖÂ±ÀÀ£
  92          {
  93   1        count1++;
  94   1        if (count1>=10){
  95   2          count1 = 0;
  96   2      //    BH1750_Init();
  97   2      //    lux = BH1750_Read(); //Ã¿´Î²âÊÔºó¶¼ÒªÖØÐÂÉÏµç
  98   2        }
  99   1        TH1 = 0x3C;
 100   1        TL1 = 0xB0;
 101   1      }
 102          
 103          void Timer2_Do() interrupt 5 using 3      //¼ÆÊ±Æ÷2¸ºÔð°´¼ü¼ì²â£¬¼ÆÊ±Æ÷2×Ô¶¯ÖØÔØ
 104          {
 105   1        TF2 = 0;   //ÖÃ0
 106   1        if (UP==0)UP_sign = 1;
 107   1        if (DOWN==0)DOWN_sign = 1;
 108   1        if (MODE==0)MODE_sign = 1;
 109   1      }
 110          
 111          void Normal_Mode()
 112          {
C51 COMPILER V9.54   MAIN                                                                  04/03/2023 19:08:32 PAGE 3   

 113   1        unsigned char brightness=0; //0 high 1 mid 2 low
 114   1        unsigned char temp1,temp2;
 115   1        OLED_ShowString(0,0,SL,16);
 116   1        OLED_ShowString(0,2,NM,16);   //²»×ö¸Ä±äµÄÏÔÊ¾ÄÚÈÝÖ»ÏÔÊ¾Ò»´Î
 117   1        OLED_ShowString(0,4,BN,16);
 118   1        OLED_ShowString(0,6,LIGHT,16);
 119   1        temp1 = IAP_ReadByte(0x2600);
 120   1        temp2 = IAP_ReadByte(0x2601); //¶ÁÈ¡±£´æµÄlightsetÖµ
 121   1        if (temp1!=0xFF){
 122   2          light_set |= (unsigned int)temp1;
 123   2          light_set |= (((unsigned int)temp2)<<8); //·Ö×Ö½Ú¶ÁÈ¡ºóºÏ³Élightset
 124   2          if (light_set==0){
 125   3            OLED_ShowString(88,4,NM_High,16);
 126   3          }
 127   2          else if (light_set==MID_LIGHTSET){
 128   3            brightness = 1;
 129   3            OLED_ShowString(88,4,NM_Mid,16);
 130   3          }
 131   2          else if (light_set==LOW_LIGHTSET){
 132   3            brightness = 2;
 133   3            OLED_ShowString(88,4,NM_Low,16); //»Øµ½ÉÏ´ÎÉè¶¨µÄ¹âÁÁÇ¿¶È
 134   3          }
 135   2        }
 136   1        Timer0_Init();  
 137   1        Timer1_Init();     //³õÊ¼»¯Á½¸ö¶¨Ê±Æ÷
 138   1        Timer2_Init();
 139   1        for(;;){
 140   2          if (count1==1){
 141   3            BH1750_Init();
 142   3            lux = BH1750_Read();
 143   3            ET1 = 0;
 144   3            OLED_ShowString(32,6,lux->data_p,16);
 145   3            ET1 = 1;                                //ÆÕÍ¨Ä£Ê½ÏÂ½ö×öÕÕ¶È±í
 146   3          }
 147   2          if ((DOWN == 0||DOWN_sign==1)&&brightness!=2){
 148   3            if (brightness==1){         //brightness±äÁ¿ÏÔÊ¾ÁËÁÁ¶ÈÄ£Ê½£¬0 1 2·Ö±ðÎªhigh mid low
 149   4              brightness++;
 150   4              OLED_ShowString(88,4,Space,16);        //ÏÈÏÔÊ¾¿Õ°×½øÐÐ¸²¸Ç£¬ÒòÎªhigh mid low×Ö·ûÊýÁ¿²»Í¬
 151   4              OLED_ShowString(88,4,NM_Low,16);
 152   4              count0 = 0;       //ÖØÖÃ¼ÆÊýÆ÷
 153   4              light_set = LOW_LIGHTSET;
 154   4            }
 155   3            else if (brightness==0){
 156   4              brightness++;
 157   4              OLED_ShowString(88,4,Space,16);
 158   4              OLED_ShowString(88,4,NM_Mid,16);
 159   4              count0 = 0;
 160   4              light_set = MID_LIGHTSET;
 161   4            }
 162   3            IAP_EraseSector(0x2600);             //µ±·¢ÉúÁÁ¶È±ä»¯Ê±²Å¸ÄÐ´eeprom
 163   3            IAP_ProgramByte(0x2600,light_set);
 164   3            IAP_ProgramByte(0x2601,light_set>>8);       //0x2601±£´ælightsetµÄ¸ßÎ»
 165   3            DOWN_sign = 0;
 166   3          }
 167   2          while(DOWN==0);               //µÈ´ýËÉ¿ª
 168   2          if ((UP == 0||UP_sign==1)&&brightness!=0){
 169   3            if (brightness==1){
 170   4              brightness--;
 171   4              OLED_ShowString(88,4,Space,16);
 172   4              OLED_ShowString(88,4,NM_High,16);
 173   4              count0 = 0;
 174   4              light_set = 0;
C51 COMPILER V9.54   MAIN                                                                  04/03/2023 19:08:32 PAGE 4   

 175   4            }
 176   3            else if (brightness==2){
 177   4              brightness--;
 178   4              OLED_ShowString(88,4,Space,16);
 179   4              OLED_ShowString(88,4,NM_Mid,16);
 180   4              count0 = 0;
 181   4              light_set = MID_LIGHTSET;
 182   4            }
 183   3            IAP_EraseSector(0x2600);
 184   3            IAP_ProgramByte(0x2600,light_set);
 185   3            IAP_ProgramByte(0x2601,light_set>>8);
 186   3            UP_sign = 0;
 187   3          }
 188   2          while(UP==0);
 189   2          if (MODE_sign)break;
 190   2        }
 191   1        Timer1_Stop();         //Í£Ö¹¶¨Ê±Æ÷
 192   1        Timer0_Stop();
 193   1        Timer2_Stop();
 194   1        light_set=0;
 195   1        count0=0;
 196   1        count1=0;
 197   1        UP_sign=0;
 198   1        DOWN_sign=0;
 199   1        MODE_sign=0;
 200   1        IAP_EraseSector(0x2400);
 201   1        IAP_ProgramByte(0x2400,1);    //1 means Smart Mode
 202   1        OLED_Clear();
 203   1        delay_nms(100);
 204   1      }
 205          
 206          void lux_plus(unsigned char op)          //¶ÔÉè¶¨ÁÁ¶ÈÖµµÄ¸ü¸Ä£¬Ö±½Ó¶Ô×Ö·ûÊý×é²Ù×÷
 207          {
 208   1        unsigned char plus_i;
 209   1        if (op=='+'){
 210   2          wish_lux[4]++;
 211   2          for (plus_i=4;plus_i>=1;plus_i--){
 212   3            if (wish_lux[plus_i]==58){  //'9'+1 == 58
 213   4              wish_lux[plus_i] = '0';
 214   4              wish_lux[plus_i-1]++;
 215   4            }
 216   3          }
 217   2        }
 218   1        else if (op=='-'){
 219   2          wish_lux[4]--;
 220   2          for (plus_i=4;plus_i>=1;plus_i--){
 221   3            if (wish_lux[plus_i]==47){  //'0'-1 == 47
 222   4              wish_lux[plus_i] = '9';
 223   4              wish_lux[plus_i-1]--;
 224   4            }
 225   3          }
 226   2        }
 227   1      }
 228          
 229          unsigned int abs_minus(unsigned int a,unsigned int b) //·µ»ØÁ½ÊýµÄ´ó¼õÐ¡
 230          {
 231   1        if (a>b)return(a-b);
 232   1        else if (a<b)return(b-a);
 233   1        return 0;
 234   1      }
 235          
 236          void PI_Control(unsigned char *wl)       //ºËÐÄµÄPID¿ØÖÆËã·¨º¯Êý
C51 COMPILER V9.54   MAIN                                                                  04/03/2023 19:08:32 PAGE 5   

 237          {
 238   1        unsigned int PI_wl=0,delta,derivative,pow_wl=10000;
 239   1        unsigned char PI_i;
 240   1        for (PI_i=0;PI_i<=4;PI_i++){
 241   2          PI_wl += (wl[PI_i]-'0')*pow_wl;
 242   2          pow_wl/=10;                             //ÏÈ½«×Ö·ûÊý×éÖÐµÄÖµ¶ÁÈ¡Îªunsigned int
 243   2        }
 244   1        if (PI_wl==(lux->data_num)){             //Ç¡µÈÓÚ´ËÊ±ÏÂ·½ÕÕ¶È¼´¿É½áÊøº¯Êý
 245   2          return;
 246   2        }
 247   1        else{
 248   2          error = abs_minus(PI_wl,(lux->data_num)); //ÓÉÓÚPIDËã·¨ÔÚÕâÀï¿ØÖÆµÄÊÇlightsetµÄ±ä»¯Á¿´óÐ¡£¬ËùÒÔÈ«²¿È¡¾ø¶
             -ÔÖµ
 249   2          if (error<=ALLOWABLE_ERROR)return;
 250   2          error_sum += (error/DT);
 251   2          derivative = abs_minus(error,error_last)*DT;
 252   2          delta = ((KP*error)>>pow_KP) + ((KI*error_sum)>>pow_KI)+((KD*derivative)>>pow_KD);  //¼ÇµÃ¼ÓÀ¨ºÅ
 253   2          if (PI_wl>(lux->data_num)){
 254   3            if(light_set>=delta){light_set-=delta;}
 255   3            else light_set = 0;
 256   3            delay_nms(60);
 257   3          }
 258   2          else if (PI_wl<(lux->data_num)){
 259   3            if(light_set+delta<=COUNT0_SET){light_set += delta;} 
 260   3            else light_set = COUNT0_SET;
 261   3          }
 262   2        }
 263   1        error_last = error;          //¸üÐÂerror_last
 264   1      }
 265          
 266          void Smart_Mode()
 267          {
 268   1        unsigned char temp,j;
 269   1        unsigned int k=0;
 270   1        OLED_ShowString(0,0,SL,16);
 271   1        OLED_ShowString(0,2,SM,16);
 272   1        OLED_ShowString(0,4,WL,16);
 273   1        OLED_ShowString(0,6,LIGHT,16);
 274   1        for (i=0;i<=5;i++){
 275   2          temp = IAP_ReadByte(0x2800+i);
 276   2          if (temp!=0xFF)wish_lux[i] = temp;
 277   2        }
 278   1        OLED_ShowString(64,4,wish_lux_p,16);
 279   1        Timer0_Init();
 280   1        Timer1_Init();
 281   1        Timer2_Init();
 282   1        for(;;){
 283   2      //    OLED_ShowString(64,4,wish_lux_p,16);       //Ã¿¸öÑ­»·ÖØÐÂÏÔÊ¾Ò»´ÎÆÚÍûÕÕ¶È
 284   2          if (count1==9){
 285   3            BH1750_Init();
 286   3            lux = BH1750_Read();
 287   3            ET1 = 0;
 288   3            OLED_ShowString(32,6,lux->data_p,16);
 289   3            PI_Control(wish_lux_p);        //ÔÚÕâÀï½øÐÐ¿ØÖÆ
 290   3            ET1 = 1;
 291   3          }
 292   2          while(UP==0||UP_sign==1){
 293   3            if (UP==0&&wish_lux[0]<'5'){        //ÕâÀïwish_lux<50000ÊÇ×öÁË¼òµ¥´¦Àí£¬Ö»ÓÐÔÚÑô¹âÏÂ²ÅÄÜ´ïµ½Õâ¸öÕÕ¶È£¬¶
             -øÇÒ´ËÊ±¸Ä±äµÆµÄÁÁ¶È¶Ô¸Ä±äÕÕ¶ÈÃ»ÓÐÈÎºÎÒâÒå
 294   4              if(k<=5){           //kÆäÊµÎªÏ£ÍûÕÕ¶È¸Ä±äÁ¿£¬Í¨¹ýkµÄÖµÀ´ÅÐ¶Ï³¤°´ºóµÄ¶¯×÷
 295   5                lux_plus('+');
 296   5                k++;
C51 COMPILER V9.54   MAIN                                                                  04/03/2023 19:08:32 PAGE 6   

 297   5              }
 298   4              else if (k>5&&k<=20){
 299   5                j=2;
 300   5                while(j--){lux_plus('+');k++;}
 301   5              }
 302   4              else if (k>20&&k<=50){
 303   5                j=5;
 304   5                while(j--){lux_plus('+');k++;}
 305   5              }
 306   4              else if (k>50){
 307   5                j=20;
 308   5                while(j--){lux_plus('+');k++;}
 309   5              }
 310   4            }
 311   3            UP_sign = 0;
 312   3            error_sum = 0;   //Ã¿´Î¸Ä±äÍê½«ÀÛ¼ÆÎó²îºÍÉÏ´ÎÎó²î¶¼ÖÃ0
 313   3            error_last = 0;
 314   3            OLED_ShowString(64,4,wish_lux_p,16); //¸üÐÂÏ£ÍûÕÕ¶ÈÏÔÊ¾
 315   3          }
 316   2          k=0;
 317   2          while(DOWN==0||DOWN_sign==1){
 318   3            if (DOWN==0&&(((wish_lux[0]-'0')|(wish_lux[1]-'0')|(wish_lux[2]-'0')|(wish_lux[3]-'0')|(wish_lux[4]-'0'
             -))!=0)){        //¸÷Î»²»È«Îª0
 319   4              if(k<=5){
 320   5                lux_plus('-');
 321   5                k++;
 322   5              }
 323   4              else if (k>5&&k<=20){
 324   5                j=2;
 325   5                while(j--){lux_plus('-');k++;}
 326   5              }
 327   4              else if (k>20&&k<=50){
 328   5                j=5;
 329   5                while(j--){lux_plus('-');k++;}
 330   5              }
 331   4              else if (k>50){
 332   5                j=20;
 333   5                while(j--){lux_plus('-');k++;}
 334   5              }
 335   4            }
 336   3            DOWN_sign = 0;
 337   3      //      if (k>=5){
 338   3      //        OLED_ShowString(64,4,wish_lux_p,16);
 339   3      //        k=0;
 340   3      //      }
 341   3      //      k++;
 342   3      //      DOWN_sign=0;
 343   3            error_sum = 0;
 344   3            error_last = 0;
 345   3            OLED_ShowString(64,4,wish_lux_p,16);
 346   3          }
 347   2      //    if (k!=0){             //ÈôÓÐ¸Ä±ä£¬ÖØÐÂÐ´ÈëÏ£ÍûÕÕ¶È
 348   2      //      IAP_EraseSector(0x2800);
 349   2      //      for (i=0;i<=5;i++)IAP_ProgramByte(0x2800+i,wish_lux[i]);
 350   2      //      k = 0;
 351   2      //      UP_sign=0;
 352   2      //      DOWN_sign=0;
 353   2      //    }
 354   2          k=0;
 355   2          if (MODE_sign)break;
 356   2        }
 357   1        Timer1_Stop();
C51 COMPILER V9.54   MAIN                                                                  04/03/2023 19:08:32 PAGE 7   

 358   1        Timer0_Stop();
 359   1        Timer2_Stop();
 360   1        light_set=0;
 361   1        IAP_EraseSector(0x2800);
 362   1        for (i=0;i<=5;i++)IAP_ProgramByte(0x2800+i,wish_lux[i]);
 363   1        count0=0;
 364   1        count1=0;
 365   1        UP_sign=0;
 366   1        DOWN_sign=0;
 367   1        MODE_sign=0;
 368   1        IAP_EraseSector(0x2400);
 369   1        IAP_ProgramByte(0x2400,0);    //0 means Normal Mode
 370   1        OLED_Clear();
 371   1        delay_nms(100);
 372   1      }
 373          
 374          //unsigned int pow(unsigned char m,unsigned char n)
 375          //{
 376          //  unsigned char l=n;
 377          //  unsigned int result=1;   
 378          //  while(l--)result*=m;    
 379          //  return result;
 380          //}     


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1955    ----
   CONSTANT SIZE    =    104    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     64      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
